/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually
 * edited  */
/* The following lines can be configured to regenerate this file during cmake */
/* If manual edits are made, the following tags should be modified accordingly.
 */
/* BINDTOOL_GEN_AUTOMATIC(0) */
/* BINDTOOL_USE_PYGCCXML(0) */
/* BINDTOOL_HEADER_FILE(OWC_Channel_relative_cpvolk.h) */
/* BINDTOOL_HEADER_FILE_HASH(a85842b9c1d8495944dda26e78b60d1f) */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/owc/OWC_Channel_relative_cpvolk.h>
// pydoc.h is automatically generated in the build directory
#include <OWC_Channel_relative_cpvolk_pydoc.h>

void bind_OWC_Channel_relative_cpvolk(py::module &m) {

  using OWC_Channel_relative_cpvolk = ::gr::owc::OWC_Channel_relative_cpvolk;

  py::class_<OWC_Channel_relative_cpvolk, gr::sync_block, gr::block,
             gr::basic_block, std::shared_ptr<OWC_Channel_relative_cpvolk>>(
      m, "OWC_Channel_relative_cpvolk", D(OWC_Channel_relative_cpvolk))

      .def(py::init(&OWC_Channel_relative_cpvolk::make), py::arg("num_inputs"),
           py::arg("num_outputs"), py::arg("emission_angle_array"),
           py::arg("acceptance_angle_array"), py::arg("distance_array"),
           py::arg("lambertian_order_array"), py::arg("photosensor_area_array"),
           py::arg("optical_filter_transmittance_array"),
           py::arg("refractive_index_array"), py::arg("concentrator_FOV_array"),
           py::arg("E2O_conversion_factor_array"),
           py::arg("O2E_conversion_factor_array"),
           D(OWC_Channel_relative_cpvolk, make))

      .def("set_emission_angle_array",
           &OWC_Channel_relative_cpvolk::set_emission_angle_array,
           py::arg("emission_angle_array"),
           D(OWC_Channel_relative_cpvolk, set_emission_angle_array))

      .def("emission_angle_array",
           &OWC_Channel_relative_cpvolk::emission_angle_array,
           D(OWC_Channel_relative_cpvolk, emission_angle_array))

      .def("set_acceptance_angle_array",
           &OWC_Channel_relative_cpvolk::set_acceptance_angle_array,
           py::arg("acceptance_angle_array"),
           D(OWC_Channel_relative_cpvolk, set_acceptance_angle_array))

      .def("acceptance_angle_array",
           &OWC_Channel_relative_cpvolk::acceptance_angle_array,
           D(OWC_Channel_relative_cpvolk, acceptance_angle_array))

      .def("set_distance_array",
           &OWC_Channel_relative_cpvolk::set_distance_array,
           py::arg("distance_array"),
           D(OWC_Channel_relative_cpvolk, set_distance_array))

      .def("distance_array", &OWC_Channel_relative_cpvolk::distance_array,
           D(OWC_Channel_relative_cpvolk, distance_array))

      .def("set_lambertian_order_array",
           &OWC_Channel_relative_cpvolk::set_lambertian_order_array,
           py::arg("lambertian_order_array"),
           D(OWC_Channel_relative_cpvolk, set_lambertian_order_array))

      .def("lambertian_order_array",
           &OWC_Channel_relative_cpvolk::lambertian_order_array,
           D(OWC_Channel_relative_cpvolk, lambertian_order_array))

      ;
}
